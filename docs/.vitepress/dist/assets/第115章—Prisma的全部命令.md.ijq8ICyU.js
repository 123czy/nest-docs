import{_ as s,c as a,o as i,V as p}from"./chunks/framework.BbAbY5cn.js";const t="/assets/第115章-1.zbuBBoqh.png",n="/assets/第115章-2.LXjXcMZ6.png",e="/assets/第115章-3.UlNo_K5k.png",l="/assets/第115章-4.6qprfOvq.png",r="/assets/第115章-5.foffQY07.png",h="/assets/第115章-6.TKBaSvuV.png",c="/assets/第115章-7.Owz4jtfJ.png",o="/assets/第115章-8.Ws2naNbI.png",d="/assets/第115章-9.mGIrYlKD.png",g="/assets/第115章-10.HSlM6Nzx.png",m="/assets/第115章-11.YBg2pCi9.png",k="/assets/第115章-12.Fw1tXvG7.png",u="/assets/第115章-13.sygyHxA9.png",E="/assets/第115章-14.--dXIuWb.png",_="/assets/第115章-15.BS9pOS75.png",v="/assets/第115章-16.RTjhwkvt.png",b="/assets/第115章-17.-xZ4KyO1.png",y="/assets/第115章-18.3gBh968j.png",C="/assets/第115章-19.Se8nGiRu.png",F="/assets/第115章-20.BD6PtN7F.png",q="/assets/第115章-21.3ANqqjxe.png",f="/assets/第115章-22.XTQKOouQ.png",B="/assets/第115章-23.xJsimwqF.png",P="/assets/第115章-24.GU7uI0a3.png",x="/assets/第115章-25.RHvUrav6.png",D="/assets/第115章-26.SR79suBo.png",A="/assets/第115章-27.RGbO-dX3.png",R="/assets/第115章-28.WpTk_Y3D.png",j="/assets/第115章-29._oq5Yauz.png",U="/assets/第115章-30.rjHZksf-.png",I="/assets/第115章-31.UCoCKCRk.png",w="/assets/第115章-32.XBIEPy71.png",G="/assets/第115章-33.j7I9iCHR.png",S="/assets/第115章-34.TmSRXcDd.png",K="/assets/第115章-35.nNOtsZbC.png",N="/assets/第115章-36.vlxVvlKB.png",T="/assets/第115章-37.ghidy0kf.png",O="/assets/第115章-38.2-vrOxWf.png",X="/assets/第115章-39.ZG8CdhHy.png",H="/assets/第115章-31.UCoCKCRk.png",W="/assets/第115章-41.YkKK89Yr.png",Y="/assets/第115章-42.NDZa5tIc.png",V="/assets/第115章-43.2-qgIutG.png",z="/assets/第115章-44.rRGF6p0G.png",Z="/assets/第115章-45.pUysjGoU.png",J="/assets/第115章-46.NmmozGaM.png",L="/assets/第115章-47.L2suC0kP.png",Q="/assets/第115章-48.3teLAkwj.png",$="/assets/第115章-49.0sCcK1_v.png",M="/assets/第115章-50.kUNoRWOq.png",ss="/assets/第115章-51.xukcnwIF.png",as="/assets/第115章-52.5WYJTtm1.png",is="/assets/第115章-53.RpKAleXj.png",ps="/assets/第115章-54.HklCndV1.png",ts="/assets/第115章-55.0UUvLooW.png",ns="/assets/第115章-56.IXGUOItz.png",Es=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"第115章—Prisma的全部命令.md","filePath":"第115章—Prisma的全部命令.md"}'),es={name:"第115章—Prisma的全部命令.md"},ls=p('<p>上节我们入门了 prisma，定义了 model 和表的映射，并且做了 CRUD。</p><p>这节来过一遍 Prisma 的全部命令。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npx prisma -h</span></span></code></pre></div><p><img src="'+t+`" alt=""></p><p>有这些：</p><ul><li><p>init：创建 schema 文件</p></li><li><p>generate： 根据 shcema 文件生成 client 代码</p></li><li><p>db：同步数据库和 schema</p></li><li><p>migrate：生成数据表结构更新的 sql 文件</p></li><li><p>studio：用于 CRUD 的图形化界面</p></li><li><p>validate：检查 schema 文件的语法错误</p></li><li><p>format：格式化 schema 文件</p></li><li><p>version：版本信息</p></li></ul><p>我们一个个来过一遍。</p><p>先创建个新项目：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>mkdir prisma-all-command</span></span>
<span class="line"><span>cd prisma-all-command</span></span>
<span class="line"><span>npm init -y</span></span></code></pre></div><p><img src="`+n+'" alt=""></p><p>全局安装 prisma，这个是命令行工具的包：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm install -g prisma</span></span></code></pre></div><h2 id="prisma-init" tabindex="-1">prisma init <a class="header-anchor" href="#prisma-init" aria-label="Permalink to &quot;prisma init&quot;">​</a></h2><p>首先来试一下 init 命令：</p><p><img src="'+e+'" alt=""></p><p>这个就是创建 schema 文件的，可以指定连接的 database，或者指定 url。</p><p>我们试一下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>prisma init</span></span></code></pre></div><p><img src="'+l+'" alt=""></p><p>执行 init 命令后生成了 prisma/shcema.prisma 和 .env 文件：</p><p><img src="'+r+'" alt=""></p><p><img src="'+h+'" alt=""></p><p>包含了 db provider，也就是连接的数据库，以及连接的 url：</p><p><img src="'+c+'" alt=""></p><p><img src="'+o+'" alt=""></p><p>删掉这俩文件，重新生成。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>prisma init --datasource-provider mysql</span></span></code></pre></div><p><img src="'+d+'" alt=""></p><p>这样生成的就是连接 mysql 的 provider 和 url 了：</p><p><img src="'+g+'" alt=""></p><p><img src="'+m+'" alt=""></p><p>其实就是改这两处的字符串，prisma init 之后自己改也行。</p><p>再删掉这俩文件，我们重新生成。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>prisma init --url mysql://root:guang@localhost:3306/prisma_test</span></span></code></pre></div><p>这次指定连接字符串。</p><p><img src="'+k+'" alt=""></p><p>可以看到，provider 会根据你指定的 url 来识别，并且 .env 里的 url 就是我们传入的：</p><p><img src="'+u+'" alt=""></p><p><img src="'+E+'" alt=""></p><h2 id="prisma-db" tabindex="-1">prisma db <a class="header-anchor" href="#prisma-db" aria-label="Permalink to &quot;prisma db&quot;">​</a></h2><p>创建完 schema 文件，如何定义 model 呢？</p><p>其实 init 命令的打印提示了：</p><p><img src="'+_+'" alt=""></p><p>你可以执行 prisma db pull 把数据库里的表同步到 schema 文件。</p><p>我们试一下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>prisma db pull</span></span></code></pre></div><p><img src="'+v+'" alt=""></p><p>提示发现了 2 个 model 并写入了 schema 文件。</p><p>现在连接的 prisma_test 数据库里是有这两个表的：</p><p><img src="'+b+'" alt=""></p><p>生成的 model 定义是这样的：</p><p><img src="'+y+'" alt=""></p><p>其中，@@index 是定义索引，这里定义了 authorId 的外键索引。</p><p>此外，db 命令还有别的功能：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>prisma db -h</span></span></code></pre></div><p><img src="'+C+'" alt=""></p><p>试下 prisma db push 命令：</p><p>首先在 mysql workbench 里把这两个表删掉：</p><p><img src="'+F+'" alt=""></p><p>然后执行 db push：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>prisma db push</span></span></code></pre></div><p><img src="'+q+'" alt=""></p><p>提示同步到了 database，并且生成了 client 代码。</p><p>在 mysql workbench 里可以看到新的表：</p><p><img src="'+f+'" alt=""></p><p>seed 命令是执行脚本插入初始数据到数据库。</p><p>我们用 ts 来写，先安装相关依赖：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm install typescript ts-node @types/node --save-dev</span></span></code></pre></div><p>创建 tsconfig.json</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npx tsc --init</span></span></code></pre></div><p><img src="'+B+`" alt=""></p><p>然后写下初始化脚本 prisma/seed.ts</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { PrismaClient } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@prisma/client&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> prisma</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PrismaClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  log: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      emit: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;stdout&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      level: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;query&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prisma.user.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;东东东&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            email: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dongdong@dong.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Post: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                create: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;aaa&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        content: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;aaaa&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bbb&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        content: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bbbb&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>在 package.json 添加 seed 命令的配置：</p><p><img src="`+P+`" alt=""></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;prisma&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;seed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npx ts-node prisma/seed.ts&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre></div><p>然后执行 seed：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>prisma db seed</span></span></code></pre></div><p><img src="`+x+'" alt="image.png"></p><p>在 mysql workbench 里可以看到数据被正确插入了：</p><p><img src="'+D+'" alt=""></p><p><img src="'+A+'" alt=""></p><p>其实 seed 命令就是把跑脚本的过程封装了一下，和直接用 ts-node 跑没啥区别。</p><p>然后是 prisma db execute，这个是用来执行 sql 的。</p><p>比如我写一个 prisma/test.sql 的文件：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">delete</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Post </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>然后执行 execute：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>prisma db execute --file prisma/test.sql --schema prisma/schema.prisma</span></span></code></pre></div><p>这里 --file 就是指定 sql 文件的。</p><p>而 --schema 指定 schema 文件，主要是从中拿到数据库连接信息。</p><p><img src="'+R+'" alt=""></p><p>然后去 mysql workbench 里看一下，确实 id 为 2 的 Post 数据没有了：</p><p><img src="'+j+'" alt=""></p><p>这就是 db 的 4 个命令。</p><h2 id="prisma-migrate" tabindex="-1">prisma migrate <a class="header-anchor" href="#prisma-migrate" aria-label="Permalink to &quot;prisma migrate&quot;">​</a></h2><p>mirgrate 是迁移的意思，在这里是指表的结构变化。</p><p>prisma migrate 有这些子命令：</p><p><img src="'+U+'" alt=""></p><p>我们分别来看一下。</p><p>首先是 prisma migrate dev。</p><p>这个我们前面用过，它会根据 schema 的变化生成 sql 文件，并执行这个 sql，还会生成 client 代码。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>prisma migrate dev --name init</span></span></code></pre></div><p>因为之前创建过表，并且有数据。</p><p>它会提示是否要 reset：</p><p><img src="'+I+'" alt=""></p><p>选择是，会应用这次 mirgration，生成 sql 文件：</p><p><img src="'+w+'" alt=""></p><p>并且会生成 client 代码，而且会自动执行 prisma db seed，插入初始化数据。</p><p><img src="'+G+'" alt=""></p><p><img src="'+S+'" alt=""></p><p>这样就既创建了表，又插入了初始数据，还生成了 client。</p><p>我们开发的时候经常用这个命令。</p><p>在 prisma/migrations 下会保存这次 migration 的 sql 文件。</p><p>目录名是 “年月日时分秒_名字” 的格式：</p><p><img src="'+K+'" alt=""></p><p>那如果我们改一下 schema 文件，再次执行 migrate dev 呢？</p><p>在 Post 的 model 定义里添加 tag 字段：</p><p><img src="'+N+'" alt=""></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>tag       String  @default(&quot;&quot;)</span></span></code></pre></div><p>然后 migrate dev：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>prisma migrate dev --name age-field</span></span></code></pre></div><p><img src="'+T+'" alt=""></p><p>这次生成的 sql 只包含了修改表结构的：</p><p><img src="'+O+'" alt=""></p><p>在数据库中有个 _prisma_migrations 表，记录着数据库 migration 的历史：</p><p><img src="'+X+'" alt=""></p><p>如果把这个表删掉，再次 mirgate dev 就会有前面的是否 reset 的提示了：</p><p><img src="'+H+'" alt=""></p><p>如果你想手动触发reset，可以用 reset 命令：</p><p><img src="'+W+'" alt=""></p><p>它会清空数据然后执行所有 migration</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>prisma migrate reset</span></span></code></pre></div><p><img src="'+Y+'" alt=""></p><p>会提示会丢失数据，确认后就会重置表，然后执行所有 migration：</p><p><img src="'+V+'" alt=""></p><p>还会生成 client 代码，并且执行 prisma db seed 来初始化数据。</p><h2 id="prisma-generate" tabindex="-1">prisma generate <a class="header-anchor" href="#prisma-generate" aria-label="Permalink to &quot;prisma generate&quot;">​</a></h2><p>generate 命令只是用来生成 client 代码的，他并不会同步数据库：</p><p><img src="'+z+'" alt=""></p><p>只是根据 schema 定义，在 node_modules/@prisma/client 下生成代码，用于 CRUD。</p><h2 id="prisma-studio" tabindex="-1">prisma studio <a class="header-anchor" href="#prisma-studio" aria-label="Permalink to &quot;prisma studio&quot;">​</a></h2><p>这个是可以方便 CRUD 数据的图形界面：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>prisma studio</span></span></code></pre></div><p><img src="'+Z+'" alt=""></p><p>选择一个 model：</p><p><img src="'+J+'" alt=""></p><p>会展示它的所有数据：</p><p><img src="'+L+'" alt=""></p><p>可以编辑记录： <img src="'+Q+'" alt=""></p><p>删除记录： <img src="'+$+'" alt=""></p><p>新增记录： <img src="'+M+'" alt=""></p><p>不过一般我们都用 mysql workbench 来做。</p><h2 id="prisma-validate" tabindex="-1">prisma validate <a class="header-anchor" href="#prisma-validate" aria-label="Permalink to &quot;prisma validate&quot;">​</a></h2><p>这个是用来检查 schema 文件是否有语法错误的：</p><p><img src="'+ss+'" alt=""></p><p>比如我写错一个类型，然后执行 validate：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>prisma validate</span></span></code></pre></div><p>会提示这里有错误：</p><p><img src="'+as+'" alt=""></p><p>当然，我们安装了 prisma 的插件之后，可以直接在编辑器里看到这个错误：</p><p><img src="'+is+'" alt=""></p><p>就和 eslint 差不多。</p><h2 id="prisma-format" tabindex="-1">prisma format <a class="header-anchor" href="#prisma-format" aria-label="Permalink to &quot;prisma format&quot;">​</a></h2><p>这个是用来格式化 prisma 文件的：</p><p><img src="'+ps+'" alt=""></p><p>当然，你安装了 prisma 的 vscode 插件之后，也可以直接用编辑器的 format：</p><p><img src="'+ts+'" alt=""></p><h2 id="prisma-version" tabindex="-1">prisma version <a class="header-anchor" href="#prisma-version" aria-label="Permalink to &quot;prisma version&quot;">​</a></h2><p>这个就是展示一些版本信息的，比较简单：</p><p><img src="'+ns+'" alt=""></p><p>案例代码在<a href="https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/prisma-all-command" target="_blank" rel="noreferrer">小册仓库</a></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>这节我们学习了 prisma 的全部命令：</p><ul><li><p>init：创建 schema 文件</p></li><li><p>generate： 根据 shcema 文件生成 client 代码</p></li><li><p>db：同步数据库和 schema</p></li><li><p>migrate：生成数据表结构更新的 sql 文件</p></li><li><p>studio：用于 CRUD 的图形化界面</p></li><li><p>validate：检查 schema 文件的语法错误</p></li><li><p>format：格式化 schema 文件</p></li><li><p>version：版本信息</p></li></ul><p>其中，prisma init、prisma migrate dev 是最常用的。</p><p>prisma db pull、prisma db push 也可以方便的用来做 schema 和数据库的同步。</p><p>常用的命令也没有几个，多拥几遍就熟了。</p>',177),rs=[ls];function hs(cs,os,ds,gs,ms,ks){return i(),a("div",null,rs)}const _s=s(es,[["render",hs]]);export{Es as __pageData,_s as default};
